@inject HttpClient Http
<div>
    <label>@Label</label>
    <div>
        <InputFile OnChange="OnChange" accept="image/png, image/jpeg, image/jpg"/>
    </div>
</div>

<div>
    @if (imageBase64 is not null)
    {
        <div>
            <div style="margin: 10px">
                <img src="data:image/jpeg;base64, @imageBase64" style="width:400px" />
            </div>
        </div>
    }

    @if (ImageURL is not null)
    {
        <div>
            <div style="margin: 10px">
                <img src="@ImageURL" style="width:400px" />
            </div>
        </div>
    }

    @foreach (var item in filesBase64)
    {
        <img src="data:@item.contentType;base64,@item.base64data" />
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Imagen";
    [Parameter] public string? ImageURL { get; set; }
    [Parameter] public EventCallback<string> ImageSelected { get; set; }
    private string? imageBase64;

    List<ImageFile> filesBase64 = new List<ImageFile>();
    string message = "InputFile";
    bool isDisabled = false;

    async Task OnChanges(InputFileChangeEventArgs e)
    {
        var imagenes = e.GetMultipleFiles();

        foreach (var imagen in imagenes)
        {
            var arrBytes = new byte[imagen.Size];
            await imagen.OpenReadStream().ReadAsync(arrBytes);
            imageBase64 = Convert.ToBase64String(arrBytes);
            ImageURL = null;
            await ImageSelected.InvokeAsync(imageBase64);
            StateHasChanged();
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var arrBytes = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(arrBytes); // copy the stream to the buffer
                imageBase64 = Convert.ToBase64String(arrBytes);
                ImageURL = null;
                await ImageSelected.InvokeAsync(imageBase64);
                StateHasChanged();
            }
            //filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }); // convert to a base64 string!!
        }
        message = "Click UPLOAD to continue";
    }

    //async Task OnChange(InputFileChangeEventArgs e)
    //{
    //    var files = e.GetMultipleFiles(); // get the files selected by the users
    //    foreach (var file in files)
    //    {
    //        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
    //        var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
    //        //using (var stream = resizedFile.OpenReadStream())
    //        //{
    //        //    await stream.ReadAsync(buf); // copy the stream to the buffer
    //        //}
    //        //filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }); // convert to a base64 string!!
    //    }
    //    message = "Click UPLOAD to continue";
    //}
    async Task Upload()
    {
        isDisabled = true;
        using (var msg = await Http.PostAsJsonAsync<List<ImageFile>>("/api/upload", filesBase64, System.Threading.CancellationToken.None))
        {
            isDisabled = false;
            if (msg.IsSuccessStatusCode)
            {
                message = $"{filesBase64.Count} files uploaded";
                filesBase64.Clear();
            }
        }
    }
}
