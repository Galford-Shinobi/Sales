@page "/states/details/{StateId:int}"
@using Sales.WEB.Pages.Cities;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if (state is null)
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe" /> @state.Name
                @*<a class="btn btn-sm btn-outline-primary float-end" href="/cities/create/@StateId"><i class="oi oi-plus" /> Nueva Ciudad</a>*@
                <a class="btn btn-sm btn-outline-primary float-end" @onclick=@(() => ShowModal(StateId, false))><i class="oi oi-plus" /> Nueva Ciudad</a>
                <a class="btn btn-sm btn-outline-success float-end mx-2" href="/countries/details/@state.CountryId"><i class="oi oi-arrow-thick-left" /> Regresar</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>


            <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />

            <GenericList MyList="cities!">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Ciudad</th>
                                <th style="width:180px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var city in cities!)
                            {
                                <tr>
                                    <td>
                                        @city.Name
                                    </td>
                                    <td>
                                        @*<a href="/cities/edit/@city.Id" class="btn btn-outline-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>*@
                                        <a @onclick=@(() => ShowModal(city.Id, true)) class="btn btn-outline-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-outline-danger btn-sm" @onclick=@(() => DeleteAsync(city.Id))><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    private State? state;
    private List<City>? cities;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int StateId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    //private async Task LoadAsync()
    //{
    //    var responseHttp = await repository.Get<State>($"/api/states/{StateId}");
    //    if (responseHttp.Error)
    //    {
    //        if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
    //        {
    //            navigationManager.NavigateTo("/countries");
    //            return;
    //        }

    //        var message = await responseHttp.GetErrorMessageAsync();
    //        await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
    //        return;
    //    }

    //    state = responseHttp.Response;
    //}

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CityEdit>(string.Empty, new ModalParameters().Add("CityId", id));
        }
        else
        {
            modalReference = Modal.Show<CityCreate>(string.Empty, new ModalParameters().Add("StateId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/cities?id={StateId}&page={page}";
            url2 = $"api/cities/totalPages?id={StateId}";
        }
        else
        {
            url1 = $"api/cities?id={StateId}&page={page}&filter={Filter}";
            url2 = $"api/cities/totalPages?id={StateId}&filter={Filter}";
        }
        var responseHppt1 = await repository.Get<State>($"api/states/{StateId}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt1.Response;
        cities = responseHppt2.Response;
        totalPages = responseHppt3.Response;
    }


    private async Task DeleteAsync(int CityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/cities/{CityId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = true,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "El registro fue Borrado con éxito.");
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}
